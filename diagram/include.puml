@startuml
class Play {
    + {static} AttachToGameOver(sender:object, e:EventArgs) : void
    {static} Main(args:string[]) : void
}
class Game {
    + {static} height : int
    + {static} width : int
    + {static} dealer_turn : bool = false
    + {static} exitMessage : string = "You are out of money"
    + {static} dealer : Player?
    + {static} activeHand : int = 0
    + {static} playerXPosition : int
    + {static} playerYPosition : int
    + {static} AboutBlackJack : string
    + {static} BLACKJACK_BANNER : string = ""
    + Game()
    +  <<event>> GameOver : EventHandler? 
    + setGameOver() : void
    # <<virtual>> OnGameOver(e:EventArgs) : void
    + {static} onConsoleResize : bool
    + {static} LoadingIndicator(rounds:int) : void
    + {static} IntroAnimation() : void
    + {static} Setup(read_scores:bool) : void
    + {static} ProcessScores(fileName:string, read:bool) : void
    + {static} GetOrCreatePlayer(pName:string, startingBalance:double) : Player
    - {static} _SanitizeScores(player:Player) : void
    + {static} ShowAchievers() : void
    + {static} Shuffle(cards:List<Card>) : void
    + {static} PayOut(player:Player, hand:Hand, rate:double) : void
    + {static} DealRound() : void
    + {static} DoDoubleDown(player:Player) : void
    + {static} CanDoubleDown() : bool
    + {static} DrawMenu(erase:bool) : void
    + {static} ConfirmBusted() : void
    + {static} ConfirmMessage(message:string, level:ConsoleColor) : void
    + {static} TurnToDealer() : void
    + {static} DisplayPlayerMenu() : void
    + {static} DealCard(player:Player, hand:int, forDealer:bool) : void
    {static} ActiveIndicator(force_clear:bool) : void
    + {static} RenderGameInfo(erase:bool, renderDealer:bool) : void
    + {static} DoSplit(testing:bool) : void
    + {static} CanSplit() : bool
    + {static} QualifesForBlackJack() : bool
    + {static} CheckWinner() : void
    + {static} DealerBrain() : void
    + {static} ProcessBets(player:Player) : void
    + {static} GameOverHandler(sender:object, e:EventArgs) : void
    + {static} PreparePlayer() : Player
    + {static} RenderPlayerCards(player:Player) : void
    + {static} RenderDealerCards(visible:bool) : void
    + {static} MainMenu() : void
    + {static} PlayAgain() : void
}
class "List`1"<T> {
}
Game o-> "scores<(string playerName,  double balance)>" "List`1"
Game o-> "playerTimeOutSpan" TimeSpan
Game o-> "activePlayers<Player>" "List`1"
Game o-> "JackCard" Card
Game o-> "playerRoundStopWatch" Stopwatch
Game o-> "random" Random
Game o-> "deck<Card>" "List`1"
Game --> "state" State
Game --> "___" _______
Game --> "_______" _______
Game --> "_" ___
enum Colors {
    Clubs='♣',
    Diamonds='♦',
    Hearts='♥',
    Spades='♠',
}
enum Weight {
    Ace= 01,
    Two= 02,
    Three= 03,
    Four= 04,
    Five= 05,
    Six= 06,
    Seven= 07,
    Eight= 08,
    Nine= 09,
    Ten= 10,
    Jack= 11,
    Queen= 12,
    King= 13,
}
enum State {
    Intro,
    Lobby,
    PlaceBet,
    ConfirmDealtBlackjack,
    ChooseMove,
    ConfirmBust,
    ConfirmSplit,
    ConfirmLoss,
    ConfirmDraw,
    ConfirmWin,
    Replay,
    OutOfMoney,
}
class Table {
    + {static} round_paid : bool
    + {static} base_bet : int
    + {static} tableWidth : int
    + {static} tableHeight : int
    + Table(PlayerList:List<Player>)
    + Render() : void
    + SetPlayers() : void
}
class "List`1"<T> {
}
Table o-> "players<Player>" "List`1"
class Hand {
    + bet : double
    + is_doubled : bool
    + {static} strenght : int
    + <<override>> ToString() : string
    + TranslateCard(card:Card) : int
    + GetHandStrength() : int
}
class "List`1"<T> {
}
Hand o-> "cards<Card>" "List`1"
class Card {
    + visible : bool = false
    + Card()
    + BuildCard() : string[]
}
Card --> "Colors" Colors
Card --> "Weight" Weight
class Player {
    + name : string
    + balance : double
    + bet : double
    + Player(playerName:string, initial_bal:double)
    + <<override>> ToString() : string
    + GetBet() : int
}
class "List`1"<T> {
}
Player --> "timer" Stopwatch
Player o-> "random" Random
Player o-> "hands<Hand>" "List`1"
class Utils {
    {static} height : int
    {static} width : int
    + {static} Capitalize(word:string) : string
    + {static} Spacer(_:char, count:int, empty:bool) : void
    + {static} Stringify(textArr:string[], delimeter:char) : string
    + {static} Input(message:string, required:bool, stringType:bool) : dynamic
    + {static} Write(text:string, color:ConsoleColor, bgColor:ConsoleColor, x_axis:int?, y_axis:int?) : void
    + {static} Render(@string:string, x_axis:int?, y_axis:int?, renderSpace:bool, erase:bool, textColor:ConsoleColor?, bgColor:ConsoleColor?) : void
    + {static} DrawRect(rectWidth:int, rectHeight:int, point:(int x, int y )) : void
}
@enduml
